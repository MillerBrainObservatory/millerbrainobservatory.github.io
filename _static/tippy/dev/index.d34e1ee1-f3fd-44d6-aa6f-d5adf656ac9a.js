selector_to_html = {"a[href=\"doc/building_docs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Building MBO Documentation<a class=\"headerlink\" href=\"#building-mbo-documentation\" title=\"Permalink to this heading\">#</a></h1><h2>Development environments<a class=\"headerlink\" href=\"#development-environments\" title=\"Permalink to this heading\">#</a></h2><h3>Update Docs<a class=\"headerlink\" href=\"#update-docs\" title=\"Permalink to this heading\">#</a></h3><p>The workflow to update documentation is pretty simple.</p>", "a[href=\"doc/adding_docs.html#title\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Title<a class=\"headerlink\" href=\"#title\" title=\"Permalink to this heading\">#</a></h2><p>Titles are underlined (or over- and underlined) with\na nonalphanumeric character at least as long as the\ntext.</p><p>A lone top-level section is lifted up to be the\ndocument\u2019s title.</p>", "a[href=\"ver/gh_pr_naming.html#issue-number\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Issue Number<a class=\"headerlink\" href=\"#issue-number\" title=\"Permalink to this heading\">#</a></h2><p>Following the keyword is the issue number - this is the issue the ticket addresses. It is formatted as: <code class=\"docutils literal notranslate\"><span class=\"pre\">FIX-XXXX</span></code> where XXXX is the issue number/link (this can be copied from the URL).</p>", "a[href=\"ver/gh_pr_naming.html#merging-the-pr\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Merging the PR<a class=\"headerlink\" href=\"#merging-the-pr\" title=\"Permalink to this heading\">#</a></h2><p>For maintainablility, we should adopt a <code class=\"docutils literal notranslate\"><span class=\"pre\">Squash</span> <span class=\"pre\">&amp;</span> <span class=\"pre\">Merge</span></code> policy which results in the entire PR being a single commit on the <code class=\"docutils literal notranslate\"><span class=\"pre\">master</span></code> commit history.\nThus individual commit names (which can get very ugly and convoluted) are not important, but can be very helpful for more detailed context if ever needed.</p>", "a[href=\"doc/building_docs.html#build-docs-locally\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Build Docs Locally<a class=\"headerlink\" href=\"#build-docs-locally\" title=\"Permalink to this heading\">#</a></h2><p>Now you are ready to generate the docs, so write:</p>", "a[href=\"doc/building_docs.html#troubleshooting-docs\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Troubleshooting Docs<a class=\"headerlink\" href=\"#troubleshooting-docs\" title=\"Permalink to this heading\">#</a></h2><p><strong>Docs look good locally, 404 on site</strong></p><p>when docs look good locally but bad online, there is an issue with the github workflow.\nOn <cite>github.com/repository</cite> go to the <cite>Actions</cite> tab. The most recent deployment should be shown with a red X. Click on this X to see the error logs.\nThis is generally an issue with <cite>docs/requirements.txt</cite>. This document holds the dependencies to build documentation, and since our project builds locally and not\nonline, this is the usual suspect. The output of the github actions will tell you:</p>", "a[href=\"doc/workflow_docs.html#optimizations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Optimizations<a class=\"headerlink\" href=\"#optimizations\" title=\"Permalink to this heading\">#</a></h2><p>The only optimizing we do is utilizing the <a class=\"reference external\" href=\"https://pip.pypa.io/en/stable/cli/pip_cache/\">pip cache</a></p>", "a[href=\"doc/building_docs.html#development-environments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Development environments<a class=\"headerlink\" href=\"#development-environments\" title=\"Permalink to this heading\">#</a></h2><h3>Update Docs<a class=\"headerlink\" href=\"#update-docs\" title=\"Permalink to this heading\">#</a></h3><p>The workflow to update documentation is pretty simple.</p>", "a[href=\"ver/gh_pr_naming.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Naming the PR<a class=\"headerlink\" href=\"#naming-the-pr\" title=\"Permalink to this heading\">#</a></h1><p>The name of a PR is important, because it will eventually become the commit that shows up in <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code>. Here are the guidelines for how to name a PR.</p><p>PR name:</p>", "a[href=\"doc/workflow_docs.html#releases\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Releases<a class=\"headerlink\" href=\"#releases\" title=\"Permalink to this heading\">#</a></h2><p>Selected branches and tags: Only branches and tags that match your specified name patterns can deploy to the environment.</p><p>If you specify releases/* as a deployment branch or tag rule, only a branch or tag whose name begins with releases/ can deploy to the environment.\n(Wildcard characters will not match /. To match branches or tags that begin with release/ and contain an additional single slash, use release/<em>/</em>.) If you add main as a branch rule, a branch named main can also deploy to the environment`</p>", "a[href=\"doc/adding_docs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Adding Docs<a class=\"headerlink\" href=\"#adding-docs\" title=\"Permalink to this heading\">#</a></h1><p>TODO: A quick document to reference for somebody wanting to add a quick document\npage to this repository.</p><p>This is the convention used for Python docs:</p>", "a[href=\"ver/gh_branch_workflow.html#dev-based-pull-requests\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Dev Based Pull Requests<a class=\"headerlink\" href=\"#dev-based-pull-requests\" title=\"Permalink to this heading\">#</a></h2><p>PR\u2019s name should follow <a class=\"reference external\" href=\"https://millerbrainobservatory.github.io/user_guide/gh_pr_naming.html\">PR Naming Guide</a></p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">feature</span></code> PRs</p>", "a[href=\"ver/gh_branch_workflow.html#dev-branch-process\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Dev Branch Process<a class=\"headerlink\" href=\"#dev-branch-process\" title=\"Permalink to this heading\">#</a></h2><p>Dev branch spinoff process:</p>", "a[href=\"ver/gh_branch_workflow.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Dev Branches: What, Why, and When?<a class=\"headerlink\" href=\"#dev-branches-what-why-and-when\" title=\"Permalink to this heading\">#</a></h1><p><em>adapted from firefox open source contribution guide</em></p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">development</span></code> branches (idiomatically abbreviated <code class=\"docutils literal notranslate\"><span class=\"pre\">dev</span></code>) are simply a branch for working on batches of code being actively worked-on but not yet merged into the code that the general user will be using and that people see when they open the repository on github: <code class=\"docutils literal notranslate\"><span class=\"pre\">master</span></code>.\nThe reason for dev branches is mainly to <strong>avoid large pull-requests (PR)</strong>. Its very important for reviewers to understand and trust every change to the codebase, which small PR\u2019s greatly facilitate.</p>", "a[href=\"doc/workflow_docs.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Github Workflow<a class=\"headerlink\" href=\"#github-workflow\" title=\"Permalink to this heading\">#</a></h1><p>Documentaion deployment is handled primarily through a github action workflow. By deployment,\nwe really mean the instructions that send our <cite>html</cite> to a public server that can be linked to and\naccessed from any browser.</p><p>The workflow that manages where our <cite>html</cite> files go is <a class=\"reference external\" href=\"https://github.com/peaceiris/actions-gh-pages\">peaceitis\u2019 github action workflow</a></p>", "a[href=\"ver/gh_pr_naming.html#keyword\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Keyword<a class=\"headerlink\" href=\"#keyword\" title=\"Permalink to this heading\">#</a></h2><p>The keyword should be the first thing in the name, to let everyone know what kind of change the PR is. Here is a table of the standard keywords, and what they mean:</p>", "a[href=\"#developer-guide\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Developer Guide<a class=\"headerlink\" href=\"#developer-guide\" title=\"Permalink to this heading\">#</a></h1><p>Documentation for this compute hub and the various pipelines are build using the following tools:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
